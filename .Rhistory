n = (sqrt(Ha * (1 - Ha)) * qnorm(beta) - sqrt(Ho * (1 - Ho)) * qnorm(1 - alpha))^2/(Ho - Ha)^2
n
library(collegestats)
type_2_err_min_size(alpha = alpha, beta = beta, Ho = Ho, Ha = Ha)
#q2
Ho = 5000
sd = 1000
Ha = 5300
alpha = .11
beta = .02
n = (((qnorm(beta) - qnorm(1 - alpha)) * sd)/(Ho - Ha))^2
n
#q2
Ho = 5000
sd = 1000
Ha = 5300
alpha = .11
beta = .02
n = (((qnorm(beta) - qnorm(1 - alpha)) * sd)/(Ho - Ha))^2
n
type_2_err_min_size(alpha = alpha, beta = beta, Ho = Ho, Ha = Ha, sigma = sd)
mu_null - mu_alt + (sigma/sqrt(N)) * qnorm(1 - alpha)
# assumes testing that Ha is greater than Ho
power <- power(mu_null, mu_alt, alpha, sigma, N) {
mu_null - mu_alt + (sigma/sqrt(N)) * qnorm(1 - alpha)
}
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
}
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
1 - power(50000, 60000, .05, 50000, 100)
library("collegestats")
type_2_err(H0 = 50000, Ha = ">", p = 60000, n = 100, sigma = 50000)
type_2_err(Ho = 50000, Ha = ">", p = 60000, n = 100, sigma = 50000)
type_2_err(Ho = 50000, Ha = ">", p = 60000, n = 100, alpha = .05, sigma = 50000)
type_2_err(Ho = 50000, Ha = ">", p = 60000, n = 100, sigma = 50000)
type_2_err(Ho = 50000, Ha = ">", p = 60000, n = 100, alpha = .05, sigma = 50000)
1 - type_2_err(Ho = 50000, Ha = ">", p = 60000, n = 100, alpha = .05, sigma = 50000)
1 - power(50000, 60000, .05, 50000, 100)
#' the actual probability/mean, sample size, and significance level alpha
#'
#' @param Ho Null hypothesis
#' @param Ha Direction of the test, valid arguments are either "<", ">", or "!="
#' @param mu_alt True probability
#' @param n Sample size
#' @param alpha Significance level/Type I error probability/alpha level
#' @param sigma (Optional) population standard deviation
#' @return probability of Type II error
#' @export
type_2_err <- function(Ho, Ha, mu_alt, n, alpha, sigma = NULL) {
if(is.null(sigma)) {
message("You have not specified an optional population sd. This is usually when working with probabilities.")
# 1-sided test with Ha = greater than some value
if(Ha == ">") {
z = qnorm(1 - alpha)
sd = sqrt(Ho * (1 - Ho)/n)
upper = Ho + z * sd
B = pnorm((upper - mu_alt)/sqrt(mu_alt * (1 - mu_alt)/n))
return(B)
}
else if(Ha == "<") {
z = qnorm(1 - alpha)
sd = sqrt(Ho * (1 - Ho)/n)
lower = Ho - z * sd
z_less = pnorm((lower - mu_alt)/sqrt(mu_alt * (1 - mu_alt)/n))
B = 1 - z_less
return(B)
}
else if(Ha == "!=") {
z = qnorm(1 - (alpha)/2)
sd = sqrt(Ho * (1 - Ho)/n)
lower = Ho - z * sd
upper = Ho + z * sd
z_less = pnorm((lower - mu_alt)/sqrt(mu_alt * (1 - mu_alt)/n))
z_greater = 1 - pnorm((upper - mu_alt)/sqrt(mu_alt * (1 - mu_alt)/n))
B = z_greater - z_less
return(B)
}
else {
return(cat(paste("Usage: please specify a valid Ha value\nOptions: Ha = \"<\", \">\", \"!=\"")))
}
}
# sigma given, working with numerical values
else {
if(Ha == ">") {
z = qnorm(1 - alpha)
sd = sigma/sqrt(n)
upper = Ho + z * sd
B = pnorm((upper - mu_alt)/sd)
return(B)
}
else if(Ha == "<") {
z = qnorm(1 - alpha)
sd = sigma/sqrt(n)
lower = Ho - z * sd
z_less = pnorm((lower - mu_alt)/sd)
B = 1 - z_less
return(B)
}
else if(Ha == "!=") {
z = qnorm(1 - (alpha)/2)
sd = sigma/sqrt(n)
lower = Ho - z * sd
upper = Ho + z * sd
z_less = pnorm((lower - mu_alt)/sqrt(mu_alt * (1 - mu_alt)/n))
z_greater = pnorm((upper - mu_alt)/sd)
B = z_greater - z_less
return(B)
}
else {
return(cat(paste("Usage: please specify a valid Ha value\nOptions: Ha = \"<\", \">\", \"!=\"")))
}
}
}
setwd("collegestats")
devtools::document()
rm(list = c("type_2_err"))
devtools::document()
power <- function(Ho, Ha, mu_alt, n, alpha, sigma = NULL) {
return 1 - type_2_err(Ho = Ho, Ha = Ha, mu_alt = mu_alt, n = n, alpha = alpha, sigma = sigma)
}
power <- function(Ho, Ha, mu_alt, n, alpha, sigma = NULL) {
return(1 - type_2_err(Ho = Ho, Ha = Ha, mu_alt = mu_alt, n = n, alpha = alpha, sigma = sigma))
}
#' (optionally) the population standard deviation
#'
#' @param Ho Null hypothesis
#' @param Ha Direction of the test, valid arguments are either "<", ">", or "!="
#' @param mu_alt True mean or probability
#' @param n Sample size
#' @param alpha Significance level/Type I error probability/alpha level
#' @param sigma (Optional) population standard deviation
#' @return probability of Type II error
#' @export
power <- function(Ho, Ha, mu_alt, n, alpha, sigma = NULL) {
return(1 - type_2_err(Ho = Ho, Ha = Ha, mu_alt = mu_alt, n = n, alpha = alpha, sigma = sigma))
}
devtools::document()
rm(list = c("power"))
devtools::document()
setwd("../")
devtools::install_github("azc242/collegestats")
devtools::install_github("azc242/collegestats")
help(package = "collegestats")
setwd("collegstats")
setwd("collegestats")
devtools::document()
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
1 - power(50000, 60000, .05, 50000, 100)
setwd("../")
library(collegestats)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
1 - power(50000, 60000, .05, 50000, 100)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
1 - power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
# assumes testing that Ha is greater than Ho
# power <- function(mu_null, mu_alt, alpha, sigma, N) {
#   upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
#   return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
# }
power(50000, 60000, .05, 50000, 100)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
power(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
power(50000, 60000, .05, 50000, 100)
1 - type_2_err(Ho = 50000, Ha = ">", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
samp_sd <- sqrt(sigma^2 / samp_size)
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
z_test <- function(H0, Ha, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * sd_x_bar
lower_crit_value <- H0 + qnorm(alpha / 2) * sd_x_bar
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
}
z_test <- function(H0, Ha, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
}
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
z_test <- function(H0, Ha, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
z_test <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
z_test(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test(H0 = 0, sigma = 30, alpha = .1, samp_size = 100, x_bar = 5)
# assumes double sided test, Ha != value
z_test< <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
# assumes double sided test, Ha != value
z_test_neq <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
z_test_neq(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test_neq(H0 = 0, sigma = 30, alpha = .1, samp_size = 100, x_bar = 5)
library(collegestats)
# assumes double sided test, Ha != value
z_test_neq <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
# p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
p_value = get_p_value(get_z(p_hat = x_bar, p_null = H0, sigma = sigma), two_sided = TRUE)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
# assumes double sided test, Ha != value
z_test_neq <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
# p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
p_value = get_p_value(get_z(p_hat = x_bar, p_null = H0, size = samp_size, sigma = sigma), two_sided = TRUE)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
z_test_neq(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test_neq(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test_neq(H0 = 0, sigma = 30, alpha = .1, samp_size = 100, x_bar = 5)
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
power(50000, 60000, .05, 50000, 100)
# assumes double sided test, Ha != value
z_test_neq <- function(H0, sigma, alpha = .05, samp_size, x_bar) {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
# p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
p_value = get_p_value(get_z(p_hat = x_bar, p_null = H0, size = samp_size, sigma = sigma), two_sided = TRUE)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
z_test_neq(H0 = 0, sigma = 30, samp_size = 100, x_bar = 5)
z_test_neq(H0 = 0, sigma = 30, alpha = .1, samp_size = 100, x_bar = 5)
# assumes double sided test, Ha != value
z_test_neq <- function(H0, sigma = NULL, alpha = .05, samp_size, x_bar) {
if(is.null(sigma)) {
samp_sd <- sqrt(H0 * (1 - H0) / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
p_value = 2 * (1 - pnorm(abs(x_bar - H0) / samp_sd))
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
else {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value | x_bar > upper_crit_value)
# p_value = 2 * (1 - pnorm(abs(x_bar - H0)/samp_sd))
p_value = get_p_value(get_z(p_hat = x_bar, p_null = H0, size = samp_size, sigma = sigma), two_sided = TRUE)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
}
z_test_neq(H0 = .5, alpha = .05, samp_size = 124, x_bar = 67/124)
# z_test_neq(H0 = .5, alpha = .05, samp_size = 124, x_bar = 67/124)
z_test_neq(H0 = 494, sigma = 124, alpha = .05, samp_size = 86, x_bar = 502)
# assumes one sided test, Ha > value
z_test_leq <- function(H0, sigma = NULL, alpha = .05, samp_size, x_bar) {
if(is.null(sigma)) {
samp_sd <- sqrt(H0 * (1 - H0) / samp_size)
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0) / samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
else {
samp_sd <- sqrt(sigma^2 / samp_size)
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0)/samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value,
"Lower critical value" = lower_crit_value
))
}
}
# assumes one sided test, Ha > value
z_test_leq <- function(H0, sigma = NULL, alpha = .05, samp_size, x_bar) {
if(is.null(sigma)) {
samp_sd <- sqrt(H0 * (1 - H0) / samp_size)
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0) / samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Lower critical value" = lower_crit_value
))
}
else {
samp_sd <- sqrt(sigma^2 / samp_size)
lower_crit_value <- H0 + qnorm(alpha / 2) * samp_sd
reject_H0 = (x_bar < lower_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0)/samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Lower critical value" = lower_crit_value
))
}
}
# assumes double sided test, Ha != value
z_test_geq <- function(H0, sigma = NULL, alpha = .05, samp_size, x_bar) {
if(is.null(sigma)) {
samp_sd <- sqrt(H0 * (1 - H0) / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
reject_H0 = (x_bar > upper_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0) / samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value
))
}
else {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
reject_H0 = (x_bar > upper_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0)/samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value
))
}
}
z_test_geq(H0 = .03, alpha = .05, samp_size = 400, x_bar = 16/400)
# assumes double sided test, Ha != value
z_test_geq <- function(H0, sigma = NULL, alpha = .05, samp_size, x_bar) {
if(is.null(sigma)) {
samp_sd <- sqrt(H0 * (1 - H0) / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
reject_H0 = (x_bar > upper_crit_value)
print(abs(x_bar - H0) / samp_sd)
p_value = 1 - pnorm(abs(x_bar - H0) / samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value
))
}
else {
samp_sd <- sqrt(sigma^2 / samp_size)
upper_crit_value <- H0 + qnorm(1 - alpha/2) * samp_sd
reject_H0 = (x_bar > upper_crit_value)
p_value = 1 - pnorm(abs(x_bar - H0)/samp_sd)
return(data.frame("Reject H0" = reject_H0,
"p-value" = p_value,
"Upper critical value" = upper_crit_value
))
}
}
z_test_geq(H0 = .03, alpha = .05, samp_size = 400, x_bar = 16/400)
swewd("collegestats")
setwd("collegestats")
devtools::document()
rm(list = c("power", "z_test_geq", "z_test_leq", "z_test_neq"))
devtools::document()
devtools::document()
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
power(50000, 60000, .05, 50000, 100)
power_function = function(null_mean, null_is_false_mean, sample_size, alpha, pop_sd) {
sd_x_bar = pop_sd / sqrt(sample_size)
upper_crit_value = null_mean + qnorm(1 - alpha / 2) * sd_x_bar
lower_crit_value = null_mean + qnorm(alpha / 2) * sd_x_bar
prob_below_lower = pnorm(lower_crit_value, mean = null_is_false_mean, sd = sd_x_bar)
prob_above_upper = 1 - pnorm(upper_crit_value, mean = null_is_false_mean, sd = sd_x_bar)
power = prob_below_lower + prob_above_upper
return(power)
}
# assumes testing that Ha is greater than Ho
power <- function(mu_null, mu_alt, alpha, sigma, N) {
upper = mu_null + sigma/sqrt(N) * qnorm(1 - alpha)
return(1 - pnorm((upper - mu_alt)/(sigma/sqrt(N))))
}
power_function = function(null_mean, null_is_false_mean, sample_size, alpha, pop_sd) {
sd_x_bar = pop_sd / sqrt(sample_size)
upper_crit_value = null_mean + qnorm(1 - alpha / 2) * sd_x_bar
lower_crit_value = null_mean + qnorm(alpha / 2) * sd_x_bar
prob_below_lower = pnorm(lower_crit_value, mean = null_is_false_mean, sd = sd_x_bar)
prob_above_upper = 1 - pnorm(upper_crit_value, mean = null_is_false_mean, sd = sd_x_bar)
power = prob_below_lower + prob_above_upper
return(power)
}
power(50000, 60000, .05, 50000, 100)
power(50000, 60000, .05, 50000, 100)
power_function(null_mean = 50000, null_is_false_mean = 60000, sample_size = 100, alpha = .05, pop_sd = 50000)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, alpha = .05, sigma = 50000)
power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, alpha = .05, sigma = 50000, n = 100)
library("collegestats")
setwd("../")
library("collegestats")
power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, alpha = .05, sigma = 50000, n = 100)
power_function(null_mean = 50000, null_is_false_mean = 60000, sample_size = 100, alpha = .05, pop_sd = 50000)
library("collegestats")
power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, alpha = .05, sigma = 50000, n = 100)
power_function(null_mean = 50000, null_is_false_mean = 60000, sample_size = 100, alpha = .05, pop_sd = 50000)
library(collegestats)
power(50000, 60000, .05, 50000, 100)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, alpha = .05, sigma = 50000, n = 100)
power_function(null_mean = 50000, null_is_false_mean = 60000, sample_size = 100, alpha = .05, pop_sd = 50000)
type_2_err(Ho = 50000, Ha = "!=", mu_alt = 60000, n = 100, alpha = .05, sigma = 50000)
power_function(null_mean = 50000, null_is_false_mean = 60000, sample_size = 100, alpha = .05, pop_sd = 50000)
setwd("collegestats")
devtools::document()
rm(list = c("power"))
devtools::document()
devtools::install_github("azc242/collegestats")
